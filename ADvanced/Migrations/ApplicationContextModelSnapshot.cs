// <auto-generated />
using System;
using ADvanced.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ADvanced.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ADvanced.Models.Ad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("ADvanced.Models.AdOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdId")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ScreenId")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.HasIndex("ScreenId");

                    b.ToTable("AdOrders");
                });

            modelBuilder.Entity("ADvanced.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ADvanced.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Business");
                });

            modelBuilder.Entity("ADvanced.Models.BusinessWorkingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClotheTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayOfTheWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessWorkingTimes");
                });

            modelBuilder.Entity("ADvanced.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Military"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Shadow"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bet"
                        });
                });

            modelBuilder.Entity("ADvanced.Models.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<decimal>("IncomeCount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AdOrderId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Incomes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IncomeCount = 15m
                        });
                });

            modelBuilder.Entity("ADvanced.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ADvanced.Models.Screen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int");

                    b.Property<string>("Characteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Traffic")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("ADvanced.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AdCategory", b =>
                {
                    b.Property<int>("AdCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("AdsId")
                        .HasColumnType("int");

                    b.HasKey("AdCategoriesId", "AdsId");

                    b.HasIndex("AdsId");

                    b.ToTable("AdCategory");
                });

            modelBuilder.Entity("BusinessBusinessWorkingTime", b =>
                {
                    b.Property<int>("BusinessWorkingTimesId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessesId")
                        .HasColumnType("int");

                    b.HasKey("BusinessWorkingTimesId", "BusinessesId");

                    b.HasIndex("BusinessesId");

                    b.ToTable("BusinessBusinessWorkingTime");
                });

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.Property<int>("BusinessesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.HasKey("BusinessesId", "CategoriesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("BusinessCategory");
                });

            modelBuilder.Entity("ADvanced.Models.Ad", b =>
                {
                    b.HasOne("ADvanced.Models.User", "User")
                        .WithMany("Ads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADvanced.Models.AdOrder", b =>
                {
                    b.HasOne("ADvanced.Models.Ad", "Ad")
                        .WithMany()
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADvanced.Models.Screen", "Screen")
                        .WithMany("AdOrders")
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");

                    b.Navigation("Screen");
                });

            modelBuilder.Entity("ADvanced.Models.Address", b =>
                {
                    b.HasOne("ADvanced.Models.Business", "Business")
                        .WithMany("Addresses")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Business");
                });

            modelBuilder.Entity("ADvanced.Models.Income", b =>
                {
                    b.HasOne("ADvanced.Models.AdOrder", null)
                        .WithMany("Incomes")
                        .HasForeignKey("AdOrderId");

                    b.HasOne("ADvanced.Models.Business", "Business")
                        .WithMany("Incomes")
                        .HasForeignKey("BusinessId");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("ADvanced.Models.Payment", b =>
                {
                    b.HasOne("ADvanced.Models.AdOrder", null)
                        .WithMany("Payments")
                        .HasForeignKey("AdOrderId");

                    b.HasOne("ADvanced.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ADvanced.Models.Screen", b =>
                {
                    b.HasOne("ADvanced.Models.Address", null)
                        .WithMany("Screens")
                        .HasForeignKey("AddressId");

                    b.HasOne("ADvanced.Models.Business", null)
                        .WithMany("Screens")
                        .HasForeignKey("BusinessId");
                });

            modelBuilder.Entity("AdCategory", b =>
                {
                    b.HasOne("ADvanced.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("AdCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADvanced.Models.Ad", null)
                        .WithMany()
                        .HasForeignKey("AdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessBusinessWorkingTime", b =>
                {
                    b.HasOne("ADvanced.Models.BusinessWorkingTime", null)
                        .WithMany()
                        .HasForeignKey("BusinessWorkingTimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADvanced.Models.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessCategory", b =>
                {
                    b.HasOne("ADvanced.Models.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADvanced.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADvanced.Models.AdOrder", b =>
                {
                    b.Navigation("Incomes");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ADvanced.Models.Address", b =>
                {
                    b.Navigation("Screens");
                });

            modelBuilder.Entity("ADvanced.Models.Business", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Incomes");

                    b.Navigation("Screens");
                });

            modelBuilder.Entity("ADvanced.Models.Screen", b =>
                {
                    b.Navigation("AdOrders");
                });

            modelBuilder.Entity("ADvanced.Models.User", b =>
                {
                    b.Navigation("Ads");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
